json : 프로그래머가 파일에 정보를 저장하기 위해 만든 방식. 파일에 정보를 입력하는 방식.
nodeJS의 경우 -> package.json이라고 해야 함
package.json안 main: 프로젝트의 대표 파일이 뭔지 알려줌, 설치할 모듈 알려줌
script : 실행하고 싶은 것 - 사용하기 편하므로 초반 세팅에 많은 시간을 할애하게 됨
index.js를 작동시키는 방법
1. node index.js
2. package.json에 scripts에 등록해주고 - "win":"node index.js"
  npm run win 으로 작동
  * 실행하는 모든 명령어는 package.json있는 곳에서 사용해야 함
node_modules : npm으로 설치한 모든 패키지가 저장됨
dependencies: express가 작동하려면 필요한 패키지
package-lock.json: package.json을 지켜줌. 협업할 때 같은 버전을 설치하기 위해 필요
babel : 자성한 최신 자바스크립트 파일을 컴파일. nodeJS가 자바스크립트를 문제없이 이해할 수 있도록 변환. nodeJS용 babel을 설치해야함
devDependencies : 개발자를 위한 dependencies. dependencies가 프로젝트 작동에 필수적인 요소를 적는 것이라면 dev~는 개발자가 프로젝트 개발을 수월하게 해주는 것 
-- save-dev : npm 설치 시 이 옵션을 추가하면 dev~에 들어가게 됨 
nodemon : 파일이 수정되는 걸 감시해주는 패키지. 수정을 감지해서 자동 서버 재시작. 매번 npm run dev해줄필요 없음
middleware : request와 response사이에있는 software. = ex.logger
app.use : 어느 url에도 작동하는 global middleware
	이게 없으면 라우트를 만들 떄마다 같은 middleware를 매번 넣어줘야하는데 app.use에 넣어주면 브라우저로 어느 라우트(url)에 접근해도 app.use에 넣은 middleware를 거치고 라우트의 function을 작동하게 됨
morgan : middleware

--------------------------------------------

1. 폴더 생성 webtube
2. 파일 생성 package.json
3. github연동
4. npm i express -> node_modules 생성
5. .gitignore 생성
6. babel 설치
7. babel 설정파일 생성 babel.config.json
8.   babel/core, noe, preset-env 설치
9.   nodemon 설치
10. 라우트 설정 /lecture -> 서버의 문
11. morgan 설치
